import csv
import numpy
import pandas
import poi_gen
import matplotlib.pyplot as plt
import matplotlib
import datetime

def data_loading(datapath):
    data = pandas.read_csv(datapath, index_col=2, parse_dates=True)
    return data

def hours_of_day(data):
    data['Hour'] = data.index.map(lambda v: (v - datetime.timedelta(milliseconds=1)).hour + 1)
    hours = sorted(list(set(data['Hour'])))
    res = {}
    _ss = lambda v: sum(v['Profit'])
    for hr in hours:
        hrpos = data[data['Hour'] == hr]
        hrpos_p = hrpos[hrpos['Profit'] > 0]
        hrpos_n = hrpos[hrpos['Profit'] < 0]
        res[hr] = dict(psum=_ss(hrpos_p)/abs(_ss(hrpos_n)), cnt=len(hrpos))
    pf_hourly = pandas.DataFrame(res)
    plt.figure(figsize=(12,3))
    plt.xlabel('Hour')
    plt.ylabel('PF')
    plt.title('Hourly profit factor seasonality')
    plt.grid(True)
    d = pf_hourly.ix['psum']
    plt.plot(d.index, d, marker='o')
    
def day_of_week(data):
    data['Weekday'] = data.index.map(lambda v: v.strftime("%a"))
    weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri']
    wdd = {}
    _ps = lambda v: sum(v['Profit'])
    for wd in weekdays:
        wdpos = data[data['Weekday'] == wd]
        wdpos_p = wdpos[wdpos['Profit'] > 0]
        wdpos_n = wdpos[wdpos['Profit'] < 0]
        wdd[wd] = dict(psum=_ps(wdpos_p)/abs(_ps(wdpos_n)), cnt=len(wdpos))
    pf_daily = pandas.DataFrame(wdd, columns=weekdays)
    plt.figure(figsize=(12,3))
    plt.xlabel('Day of Week')
    plt.ylabel('PF')
    plt.title('Day of week profit factor seasonality')
    plt.grid(True)
    d1 = pf_daily.ix['psum']
    plt.plot(d1, marker='o')
    plt.xticks(range(len(weekdays)), weekdays)
    
def get_d(ttype, path, tf, wsl, **kwa):
    d1 = csv.reader(open(path))
    next(d1)  # skip header
    #tts = [v[2] for v in d1]
    tts = [v[2] for v in d1 if ttype in v[1]]
    poi_l = tts
    kwa.setdefault('barformat', tf)
    r1 = poi_gen.main(poi_l, fd=True, wsl=wsl, **kwa)
    ## (base point price, all price values)
    r2 = [(d[wsl].o, [b.c for b in d]) for d in r1]
    r3 = [[float(p - bp) for p in d] for bp, d in r2]
    r4 = numpy.array(r3)
    r5 = r4.mean(axis=0)
    return r5

def plot_poi(wsl, wsr, long_data, short_data):
    plt.figure(figsize=(20,10))
    plt.subplot(211)
    plt.ylabel('P/L')
    plt.title('POI of Longs')
    plt.grid(True)
    plt.plot(range(-wsl, wsr), long_data, c='g')
    plt.subplot(212)
    plt.xlabel('Bars Holded')
    plt.ylabel('P/L')
    plt.title('POI of Shorts')
    plt.grid(True)
    plt.plot(range(-wsl, wsr), short_data, c='r')
    
def mae_mfe(data):
    data['MAE'] = data['MAE'].apply(lambda v: float(v[:-1]))
    data['MAEp'] = data['Price'] * (data['MAE'] / 100)
    data['MFE'] = data['MFE'].apply(lambda v: float(v[:-1]))
    data['MFEp'] = data['Price'] * (data['MFE'] / 100)
    plt.figure(figsize=(20,15))
    plt.subplot(311)
    plt.xlabel('MAE')
    plt.ylabel('Profit')
    plt.title('Profit/MAE scatterplot')
    #plt.text(-20000, 20000, r'MAE and profits trades distribution')#any text on graph
    #plt.axis([-10000, 100, -10000, 15000])
    plt.axhline(linewidth=2, color='b')
    plt.grid(True)
    plt.scatter(data['MAEp'],data['Profit'], s=10, c='r')
    plt.subplot(312)
    plt.xlabel('MFE')
    plt.ylabel('Profit')
    plt.title('Profit/MFE scatterplot')
    #plt.text(-20000, 20000, r'MAE and profits trades distribution')#any text on graph
    #plt.axis([-100, 15000, -10000, 15000])
    plt.axhline(linewidth=2, color='b')
    plt.grid(True)
    plt.scatter(data['MFEp'],data['Profit'], s=10, c='g')
    plt.subplot(313)
    plt.scatter(data['# bars'], data['Profit'], s=10, c='b')
    plt.xlabel('# of bars')
    plt.ylabel('Profit')
    plt.title('Profit/Number of bars')
    plt.axhline(linewidth=2, color='b')
    plt.grid(True)


