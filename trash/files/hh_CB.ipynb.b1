{
 "metadata": {
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import h2\n",
      "reload(h2)\n",
      "from h2 import *\n",
      "\n",
      "import h\n",
      "reload(h)\n",
      "\n",
      "1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/usr/local/lib/python2.7/dist-packages/pytz/__init__.py:29: UserWarning: Module numpy was already imported from /usr/lib/pymodules/python2.7/numpy/__init__.pyc, but /usr/local/lib/python2.7/dist-packages is being added to sys.path\n",
        "  from pkg_resources import resource_stream\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 1,
       "text": [
        "1"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "_sym = 'AAPL'\n",
      "start = datetime.date(1998, 1, 1)\n",
      "ohlc = marketdata.ext.load_metotron(_sym)\n",
      "ohlc = ohlc.ix[start:]\n",
      "spx = marketdata.ext.load_metotron('$SPX')\n",
      "spx = spx.ix[start:]\n",
      "print venn(ohlc.index, spx.index)[1:]\n",
      "ohlc, spx = intersect_index(ohlc, spx)\n",
      "print venn(ohlc.index, spx.index)[1:]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(set([]), set([]))\n",
        "(set([]), set([]))"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ami_code_a = \"\"\"\n",
      "Upper_Band = BBandTop(C,5,1);\n",
      "Lower_Band = BBandBot(C,5,1);\n",
      "b =(C-Lower_Band) / (Upper_Band-Lower_Band);\n",
      "Plot(b,\"b\",colorYellow,styleNoLine | styleOwnScale);\n",
      "\n",
      "SetForeign(\"$SPX\");\n",
      "VolSP = MA(V*C,65);\n",
      "RestorePriceArrays();\n",
      "xvolFilter = 3/1000000;\n",
      "liqIndex = MA(C * V,20) > (volSP*xvolFilter);\n",
      "\n",
      "minPrice = C > 5;\n",
      "maxPrice = C < 100;\n",
      "\n",
      "priceLiqScan = liqIndex & minPrice & maxPrice;\n",
      "\n",
      "trendFilt = C > MA(C,200);\n",
      "forceFilt = ADX(5) > 40;\n",
      "pullback = BarsSince(b > 0.5) > 3 AND B <= 0.1;\n",
      "volFilt = V != LLV(V,5);\n",
      "\n",
      "priceScan = trendFilt & forceFilt & pullback & volFilt;\n",
      "\n",
      "setupScan = priceLiqScan & priceScan;\n",
      "\n",
      "Lmt = 3;\n",
      "PriceTrigger = Ref(C, -1) * (1 - Lmt/100);\n",
      "Trigger = L < PriceTrigger;\n",
      "\n",
      "Buy = setupScan;\n",
      "Buy = Ref(Buy,-1) & Trigger;\n",
      "BuyPrice = Min(O, PriceTrigger);\n",
      "\n",
      "Sell = C > MA(C,3);\n",
      "SellPrice = C;\n",
      "Short = Cover = 0;\n",
      "ApplyStop(stopTypeNBar,stopModeBars, 5,0);\n",
      "\n",
      "Buy = ExRem(Buy, Sell);\n",
      "Short = ExRem(Short, Cover);\n",
      "Sell = ExRem(Sell, Buy);\n",
      "Cover = ExRem(Cover, Short);\n",
      "\n",
      "Filter = Buy;\n",
      "\"\"\""
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import re\n",
      "_xsub = lambda ptn, repl, s: re.compile(ptn, re.MULTILINE).sub(repl, s)\n",
      "def _lexrepl(repl_from, repl_to, string):\n",
      "    \"\"\" ...\n",
      "    replace whole words and add spaces if necessary.\n",
      "    NOTE: `repl_from` is treated as a regex. \"\"\"\n",
      "    def _repl(match):\n",
      "        gd = match.groupdict()\n",
      "        lm, rm = gd['_lr_left_g'], gd['_lr_right_g']\n",
      "        return ''.join([\n",
      "            lm, ' ' if lm != ' ' else '',\n",
      "            '%s' % (repl_to,),\n",
      "            ' ' if rm != ' ' else '', rm,\n",
      "            ])\n",
      "    return re.sub(\n",
      "        r'(?P<_lr_left_g>[^\\w])%s(?P<_lr_right_g>[^\\w])' % (repl_from,),  # whole word\n",
      "        _repl, string)\n",
      "\n",
      "ami_code_b = ami_code_a\n",
      "## Strip whitepaces before newline\n",
      "ami_code_b = _xsub(r' *$', r'', ami_code_b)\n",
      "## Change and fix comments\n",
      "ami_code_b = _xsub(\n",
      "    r'([^ ]?)(//+)',\n",
      "    lambda m: '%s%s%s ' % (\n",
      "        m.group(1),\n",
      "        '  ' if m.group(1) and m.group(1) != '\\n' else '',\n",
      "        m.group(2).replace('/', '#'),),\n",
      "    ami_code_b)\n",
      "## Fix whitepaces before comments\n",
      "ami_code_b = _xsub(r'([^ \\n#]) *(#+.*)$', r'\\1  \\2', ami_code_b)\n",
      "## Fix whitespaces around commas\n",
      "ami_code_b = _xsub(r' *, *([^,])', r', \\1', ami_code_b)\n",
      "## Fix whitespaces around brackets\n",
      "ami_code_b = _xsub(r'\\( *', '(', ami_code_b)\n",
      "ami_code_b = _xsub(r' *\\)', ')', ami_code_b)\n",
      "## Fix whitespaces around binary operations\n",
      "## NOTE: might have to apply it multiple times\n",
      "for _ in xrange(4):\n",
      "    ami_code_b = _xsub(r'( *)(<=|>=|!=|[*><=+/=&])( *)', r' \\2 ', ami_code_b)\n",
      "## '-' has a special unary operation case like ' -3,', so do only two-sided replaces\n",
      "ami_code_b = _xsub(r'([^ ])([\\-])([^ ])', r'\\1 \\2 \\3', ami_code_b)\n",
      "## Strip whitepaces before newline again (in case some were added)\n",
      "ami_code_b = _xsub(r' *$', r'', ami_code_b)\n",
      "## Strip out semicolons (at the endlines and with comments)\n",
      "ami_code_b = _xsub(r';$', r'', ami_code_b)\n",
      "ami_code_b = _xsub(r';( *#.*)$', r'\\1', ami_code_b)\n",
      "## ...\n",
      "## Code compat p2\n",
      "## Note that elementwise (bitwise) operators are used.\n",
      "ami_code_b = _lexrepl(r'OR', '|', ami_code_b)\n",
      "ami_code_b = _lexrepl(r'AND', '&', ami_code_b)\n",
      "## ...\n",
      "## TODO?: add various template stuff, do some template replacements like for 'SetForeign'\n",
      "## Known remaining things that are a bit beyond regexes:\n",
      "##  * case-insensitivity\n",
      "## ...\n",
      "## Indent non-empty\n",
      "ami_code_b = _xsub(r'^(.)', r'    \\1', ami_code_b)\n",
      "ami_code_b = 'def strat_base(ohlc):\\n' + ami_code_b\n",
      "# print ami_code_b\n",
      "# exec ami_code_b"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def CB(ohlc, spx):\n",
      "\n",
      "    ## Alises AMI -> Pandas\n",
      "    _min_periods = 1\n",
      "    MA = lambda s, l: pa.rolling_mean(s, l, min_periods=_min_periods)\n",
      "    LLV = lambda s, l: pa.rolling_min(s, l, min_periods=_min_periods)\n",
      "    StDev = lambda s, l: pa.rolling_std(s, l, min_periods=_min_periods)\n",
      "    Ref = lambda series, num: series.shift(-num)\n",
      "    log = np.log\n",
      "    Min = lambda *serieses: pa.concat(serieses, axis=1).min(axis=1)\n",
      "    from pyquant.transforms import RSI as q_RSI, RSI_iter as q_RSI_iter\n",
      "    RSI = lambda n: q_RSI_iter(ohlc.C, n)\n",
      "    O, H, L, C, V = ohlc.O, ohlc.H, ohlc.L, ohlc.C, ohlc.V\n",
      "    ADX = lambda n: adx(ohlc, n)\n",
      "\n",
      "    ## ...\n",
      "    # Upper_Band = BBandTop(C, 5, 1)\n",
      "    # Lower_Band = BBandBot(C, 5, 1)\n",
      "    _bband, Upper_Band, Lower_Band = bbands(C, 5, 1)\n",
      "    b = (C - Lower_Band) / (Upper_Band - Lower_Band)\n",
      "\n",
      "    O, H, L, C, V = spx.O, spx.H, spx.L, spx.C, spx.V\n",
      "    VolSP = MA(V * C, 65)\n",
      "    volumeSP = V\n",
      "    closeSP = C\n",
      "    O, H, L, C, V = ohlc.O, ohlc.H, ohlc.L, ohlc.C, ohlc.V\n",
      "\n",
      "    xvolFilter = 3.0 / 1000000\n",
      "    liqIndex = MA(C * V, 20) > (VolSP * xvolFilter)\n",
      "\n",
      "    minPrice = C > 5\n",
      "    maxPrice = C < 100\n",
      "\n",
      "    priceLiqScan = liqIndex & minPrice & maxPrice\n",
      "\n",
      "    trendFilt = C > MA(C, 200)\n",
      "    forceFilt = ADX(5) > 40\n",
      "    pullback = (BarsSince(b > 0.5) > 3) & (b <= 0.1)\n",
      "    volFilt = V != LLV(V, 5)\n",
      "\n",
      "    priceScan = trendFilt & forceFilt & pullback & volFilt\n",
      "\n",
      "    setupScan = priceLiqScan & priceScan\n",
      "\n",
      "    Lmt = 3\n",
      "    PriceTrigger = Ref(C, -1) * (1.0 - Lmt / 100.0)\n",
      "    Trigger = L < PriceTrigger\n",
      "\n",
      "    Buy = setupScan\n",
      "    Buy = Ref(Buy, -1) & Trigger\n",
      "    BuyPrice = Min(O, PriceTrigger)\n",
      "\n",
      "    Sell = C > MA(C, 3)\n",
      "    SellPrice = C\n",
      "    Short = Cover = pa.Series(0, index=ohlc.index)\n",
      "    ## XXXXXXXXXX:\n",
      "    # ApplyStop(stopTypeNBar, stopModeBars, 5, 0)\n",
      "    _sell_nbar = h.nbarexit(Buy, 5)\n",
      "    Sell1 = Sell\n",
      "    Sell = Sell | _sell_nbar\n",
      "\n",
      "    Buy_b, Short_b, Sell_b, Cover_b = Buy, Short, Sell, Cover\n",
      "    Sell_b = Sell1\n",
      "    Buy = ExRem(Buy, Sell)\n",
      "    Short = ExRem(Short, Cover)\n",
      "    Sell = ExRem(Sell, Buy)\n",
      "    Cover = ExRem(Cover, Short)\n",
      "\n",
      "    Filter = Buy\n",
      "\n",
      "    return locals()\n",
      "\n",
      "\n",
      "loc = CB(ohlc, spx)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "bct = pbt.Backtest(dict(loc, ohlc=ohlc), name='CB')\n",
      "len(bct.trades)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "32"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ami_vars_path = \"/home/mad/madlabs/lab/cbcheck/Cb_vars_AAPL.csv\"\n",
      "_export_vars_base = (\n",
      "    '''Ticker,Date/Time,O,H,L,C,Upper_Band,Lower_Band,BB,VolSP,volumeSP,closeSP,Vol_close,liqIndex,minPrice,maxPrice,priceLiqScan,hardLong,hardTrend,hardDrop,hardVol,setupScan,BuyHR,Buy_b,Trigger,PriceTrigger,BuyPrice,stp_MA,Sell_b,'''\n",
      ").split(',')\n",
      "_export_vars = [v for v in _export_vars_base if v in loc.keys()]\n",
      "# print _export_vars\n",
      "\n",
      "varmap = {k: k for k in _export_vars}\n",
      "\n",
      "import pyquant.backtest.amicomp as amicomp\n",
      "#reload(amicomp)\n",
      "ami_var_compare = amicomp.compare\n",
      "comp = ami_var_compare(\n",
      "    loc,\n",
      "    varmap=varmap,\n",
      "    ami_vars_path=ami_vars_path,\n",
      "    precision_p=0.05,\n",
      "    )"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#H(comp)\n",
      "#H(amicomp.filter_comp_1(comp).tail(500))\n",
      "#H(amicomp.filter_comp_2(comp).tail(100))\n",
      "H(comp.ix['2011-03-18'])\n",
      "#     priceScan = trendFilt & forceFilt & pullback & volFilt\n",
      "#     setupScan = priceLiqScan & priceScan"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ami</th>\n",
        "      <th>pandas</th>\n",
        "      <th>match</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>var</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>BuyPrice</th>\n",
        "      <td>           46.370000</td>\n",
        "      <td>           46.370000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Buy_b</th>\n",
        "      <td>            0.000000</td>\n",
        "      <td>            0.000000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>C</th>\n",
        "      <td>           47.240000</td>\n",
        "      <td>           47.240000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>H</th>\n",
        "      <td>           48.310000</td>\n",
        "      <td>           48.310000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>L</th>\n",
        "      <td>           47.140000</td>\n",
        "      <td>           47.140000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Lower_Band</th>\n",
        "      <td>           47.100000</td>\n",
        "      <td>           46.940000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>O</th>\n",
        "      <td>           48.160000</td>\n",
        "      <td>           48.160000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>PriceTrigger</th>\n",
        "      <td>           46.370000</td>\n",
        "      <td>           46.370000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Sell_b</th>\n",
        "      <td>            0.000000</td>\n",
        "      <td>            0.000000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Trigger</th>\n",
        "      <td>            0.000000</td>\n",
        "      <td>            0.000000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Upper_Band</th>\n",
        "      <td>           49.720000</td>\n",
        "      <td>           49.880000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>VolSP</th>\n",
        "      <td>4430000000000.000000</td>\n",
        "      <td>4433148538328.190430</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>closeSP</th>\n",
        "      <td>         1279.200000</td>\n",
        "      <td>         1279.200000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>liqIndex</th>\n",
        "      <td>            1.000000</td>\n",
        "      <td>            1.000000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>maxPrice</th>\n",
        "      <td>            1.000000</td>\n",
        "      <td>            1.000000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>minPrice</th>\n",
        "      <td>            1.000000</td>\n",
        "      <td>            1.000000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>priceLiqScan</th>\n",
        "      <td>            1.000000</td>\n",
        "      <td>            1.000000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>setupScan</th>\n",
        "      <td>            1.000000</td>\n",
        "      <td>            0.000000</td>\n",
        "      <td> False</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>volumeSP</th>\n",
        "      <td>   4338295808.000000</td>\n",
        "      <td>   4338295808.000000</td>\n",
        "      <td>  True</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>"
       ],
       "metadata": {},
       "output_type": "display_data",
       "text": [
        "<IPython.core.display.HTML at 0x7fd3d4243dd0>"
       ]
      }
     ],
     "prompt_number": 11
    }
   ],
   "metadata": {}
  }
 ]
}